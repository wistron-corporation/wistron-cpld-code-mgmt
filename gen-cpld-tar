#!/bin/bash
set -eo pipefail

help=$'Generate Tarball with CPLD .svf file and MANIFEST Script

Generates a CPLD .svf file tarball from given file as input.
Creates a MANIFEST for .svf verification and recreation
Packages the .svf and MANIFEST together in a tarball

usage: gen-cpld-tar [OPTION] <SVF FILE>...

Options:
   -m, --machine <name>   Optionally specify the target machine name of this
                          .svf.
   -v, --version <name>   Specify the version of CPLD .svf file
   -h, --help             Display this help text and exit.
'

outfile=""
machine=""
version=""

while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
    -m|--machine)
      machine="$2"
      shift 2
      ;;
    -v|--version)
      version="$2"
      shift 2
      ;;
    -h|--help)
      echo "$help"
      exit 0
      ;;
    -*)
      echo "Unrecognised option $1"
      echo "$help"
      exit 
      ;;
    *)
      file="$1"
      shift 1
      ;;
  esac
done

if [ ! -f "${file}" ]; then
  echo "${file} not found, Please enter a valid CPLD .svf file"
  echo "$help"
  exit 1
fi

if [[ -z $version ]]; then
  echo "Please provide version of .svf with -v option"
  exit 1
fi

outfile=`pwd`/"$machine-CPLD-$version.tar"

scratch_dir=`mktemp -d`
# Remove the temp directory on exit.
# The files in the temp directory may contain read-only files, so add
# --interactive=never to skip the prompt.
trap "{ rm -r --interactive=never ${scratch_dir}; }" EXIT

manifest_location="MANIFEST"

# Go to scratch_dir
cp ${file} ${scratch_dir}
cd "${scratch_dir}"

echo "Creating MANIFEST for the .svf"
echo -e "purpose=xyz.openbmc_project.Software.Version.VersionPurpose.CPLD\n\
version=$version" > $manifest_location

echo -e "ExtendedVersion=" >> $manifest_location

if [[ ! -z "${machine}" ]]; then
    echo -e "MachineName=${machine}" >> $manifest_location
fi

echo -e "CompatibleName=" >> $manifest_location

tar -cvf $outfile $manifest_location $(basename "${file}")
echo "CPLD tarball is at $outfile"
